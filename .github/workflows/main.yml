name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      
    services:
      postgres-test:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
          

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run unit tests
      run: |
        source .venv/bin/activate
        pytest tests/unit/ -v \
          --alluredir=allure-results/unit \
          --junitxml=test-reports/unit-tests.xml
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        TEST_ENV: unit

    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-results
        path: |
          allure-results/unit/
          test-reports/unit-tests.xml
      if: always()
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: needs.unit-tests.result == 'success'
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      
    services:
      postgres-test:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download unit test results
      uses: actions/download-artifact@v3
      with:
        name: unit-test-results

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Initialize test database
      run: |
        source .venv/bin/activate
        python scripts/init_test_data.py
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db

    - name: Run integration tests
      run: |
        source .venv/bin/activate
        pytest tests/integration/ -v \
          --alluredir=allure-results/integration \
          --junitxml=test-reports/integration-tests.xml
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
        TEST_ENV: integration

    - name: Cleanup test data
      run: |
        source .venv/bin/activate
        python scripts/cleanup_test_data.py
      if: always()
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          allure-results/integration/
          test-reports/integration-tests.xml
      if: always()

  allure-report:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Download Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-history

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: allure-report
